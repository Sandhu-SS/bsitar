% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modelbased_growthparameters.R
\name{modelbased_growthparameters.bgmfit}
\alias{modelbased_growthparameters.bgmfit}
\alias{modelbased_growthparameters}
\title{Estimate model based individual growth parameters}
\usage{
\method{modelbased_growthparameters}{bgmfit}(
  model,
  resp = NULL,
  dpar = NULL,
  ndraws = NULL,
  draw_ids = NULL,
  newdata = NULL,
  parameter = NULL,
  future = FALSE,
  future_session = "multisession",
  future_splits = NULL,
  future_method = "future",
  future_re_expose = NULL,
  newdata_fixed = NULL,
  envir = NULL,
  ...
)

modelbased_growthparameters(model, ...)
}
\arguments{
\item{model}{An object of class \code{bgmfit}.}

\item{resp}{A character string (default \code{NULL}) to specify the response
variable when processing posterior draws for \code{univariate_by} and
\code{multivariate} models. See \code{\link[=bsitar]{bsitar()}} for details on
\code{univariate_by} and \code{multivariate} models.}

\item{dpar}{Optional name of a predicted distributional parameter.
If specified, expected predictions of this parameters are returned.}

\item{ndraws}{A positive integer indicating the number of posterior draws to
use in estimation. If \code{NULL} (default), all draws are used.}

\item{draw_ids}{An integer specifying the specific posterior draw(s) to use
in estimation (default \code{NULL}).}

\item{newdata}{An optional data frame for estimation. If \code{NULL}
(default), \code{newdata} is retrieved from the \code{model}.}

\item{parameter}{A single character string or a character vector specifying
the growth parameter(s) to be estimated. Options include \code{'tgv'}
(takeoff growth velocity), \code{'atgv'} (age at takeoff growth velocity),
\code{'pgv'} (peak growth velocity), \code{'apgv'} (age at peak growth
velocity), \code{'cgv'} (cessation growth velocity), \code{'acgv'} (age at
cessation growth velocity), and \code{'all'}. If \code{parameter = NULL}
(default), age at peak growth velocity (\code{'apgv'}) is estimated. When
\code{parameter = 'all'}, all six parameters are estimated. Note that the
\code{'all'} option cannot be used when the \code{by} argument is set to
\code{TRUE}.}

\item{future}{A logical value (default \code{FALSE}) to specify whether or
not to perform parallel computations. If set to \code{TRUE}, the
\code{\link[future.apply:future_lapply]{future.apply::future_sapply()}} function is used to summarize the posterior
draws in parallel.}

\item{future_session}{A character string specifying the session type when
\code{future = TRUE}. The \code{'multisession'} (default) option sets the
multisession environment, while the \code{'multicore'} option sets up a
multicore session. Note that \code{'multicore'} is not supported on Windows
systems. For more details, see \code{\link[future.apply:future_lapply]{future.apply::future_sapply()}}.}

\item{future_splits}{A list (default \code{NULL}) that can be an unnamed
numeric list, a logical value, or a numeric vector of length 1 or 2. It is
used to split the processing of posterior draws into smaller subsets for
parallel computation.
\itemize{
\item If passed as a list (e.g., \code{future_splits = list(1:6, 7:10)}),
each sequence of
numbers is passed to the \code{draw_ids} argument.
\item If passed as a numeric vector (e.g., \code{future_splits = c(10, 2)}),
the first element
specifies the number of draws (see \code{draw_ids}) and the second element
indicates the number of splits. The splits are created using
\code{\link[parallel:splitIndices]{parallel::splitIndices()}}.
\item If passed as a numeric vector of length 1, the first element is
internally set as the
number of draws (\code{ndraws} or \code{draw_ids}) depending on which one
is not \code{NULL}.
\item If \code{TRUE}, a numeric vector for \code{future_splits} is created
based on the number
of draws (\code{ndraws}) and the number of cores (\code{cores}).
\item If \code{FALSE}, \code{future_splits} is ignored.
The use case for \code{future_splits} is to save memory and improve
performance, especially on \code{Linux} systems when \code{future::plan()}
is set to \code{multicore}. Note: on Windows systems, R processes may not
be freed automatically when using \code{'multisession'}. In such cases, the
R processes can be interrupted using \code{\link[installr:kill_all_Rscript_s]{installr::kill_all_Rscript_s()}}.
}}

\item{future_method}{A character string (default \code{'future'}) to specify
the method for parallel computation. Options include:
\itemize{
\item \code{'future'}: Uses \code{\link[future:future]{future::future()}} along with
\code{\link[future.apply:future_lapply]{future.apply::future_lapply()}} for parallel execution.
\item \code{'foreach'}: Uses \code{\link[foreach:foreach]{foreach::foreach()}} with the
\code{'dofuture'} function from the \code{doFuture} package for parallel
execution.
}}

\item{future_re_expose}{A logical (default \code{NULL}) to indicate whether
to re-expose \code{Stan} functions when \code{future = TRUE}. This is
especially relevant when \code{\link[future:plan]{future::plan()}} is set to \code{'multisession'},
as already exposed C++ \code{Stan} functions cannot be passed across
multiple sessions.
\itemize{
\item When \code{future_re_expose = NULL} (the default), \code{future_re_expose}
is automatically set to \code{TRUE} for the \code{'multisession'} plan.
\item It is advised to explicitly set \code{future_re_expose = TRUE} for speed
gains when using parallel processing with \code{future = TRUE}.
}}

\item{newdata_fixed}{An indicator to specify whether to check for the data
format and structure of the user provided \code{newdata} and apply needed
\code{prepare_data2} and \code{prepare_transformations}
(\code{newdata_fixed = NULL}, default), return user provided \code{newdata}
(\code{newdata = TRUE}) as it is without checking for the data format or
applying \code{prepare_data2} and \code{prepare_transformations}
(\code{newdata_fixed = 0}), check for the data format and if needed,
prepare data format using \code{prepare_data2} (\code{newdata_fixed = 1}),
or apply \code{prepare_transformations} only assuming that data format is
correct (\code{newdata_fixed = 2}). It is strongly recommended that user
either leave the \code{newdata = NULL} and \code{newdata_fixed = NULL} in
which case data used in the model fitting is automatically retrieved and
checked for the required data format and transformations, and if needed,
\code{prepare_data2} and \code{prepare_transformations} are applied
internally. The other flags provided for  \code{newdata_fixed = 0, 1, 2}
are mainly for the internal use during post-processing.}

\item{envir}{The environment used for function evaluation. The default is
\code{NULL}, which sets the environment to \code{parent.frame()}. Since
most post-processing functions rely on \pkg{brms}, it is recommended to set
\code{envir = globalenv()} or \code{envir = .GlobalEnv}, especially for
derivatives like velocity curves.}

\item{...}{Additional arguments passed to the function.}
}
\value{
A named list of 3 comprising individual level estimate of
\strong{age}, \strong{distance} and \strong{velocity}. Each of the list is
a data frame with one row per individual and six columns.\cr

\strong{age} \cr \item{id}{subject identifier} \item{Estimate}{subject's
age corresponding to \code{x}.} \item{Est.Error}{SD of Estimate} \item{Q2.5
}{Lower CI} \item{Q97.5}{Upper CI}
\item{missing}{logical flags where TRUE means subject's specified age lies
outside their measurement range}

\strong{distance} \cr \item{id}{subject identifier}
\item{Estimate}{distance corresponding to subject's age}
\item{Est.Error}{SD of Estimate} \item{Q2.5 }{Lower CI} \item{Q97.5}{Upper
CI}
\item{missing}{logical flags where TRUE means subject's specified age lies
outside their measurement range}

\strong{velocity} \cr \item{id}{subject identifier}
\item{Estimate}{velocity corresponding to subject's age}
\item{Est.Error}{SD of Estimate} \item{Q2.5 }{Lower CI} \item{Q97.5}{Upper
CI}
\item{missing}{logical flags where TRUE means subject's specified age lies
outside their measurement range}
}
\description{
The \strong{modelbased_growthparameters()} function estimates
individual growth parameters by mapping population average estimate of age
of interest (such as age at peak growth velocity or age at take off) on to
the individual velocity curves defined by individual level random effects.
}
\details{
Since SITAR is a shape-invariant model, each individual curve has a
peak velocity point that can be mapped by knowing the population average age
at peak velocity. This hold true even when a individual lacks measurements at
the expected turning point.
}
\examples{
\donttest{
# Fit Bayesian SITAR model 

# To avoid mode estimation which takes time, the Bayesian SITAR model fit to 
# the 'berkeley_exdata' has been saved as an example fit ('berkeley_exfit').
# See 'bsitar' function for details on 'berkeley_exdata' and 'berkeley_exfit'.

# Check and confirm whether model fit object 'berkeley_exfit' exists
berkeley_exfit <- getNsObject(berkeley_exfit)

model <- berkeley_exfit

modelbased_growthparameters(model, ndraws = 10)

}

}
\seealso{
\code{\link[marginaleffects:predictions]{marginaleffects::predictions()}}
}
\author{
Satpal Sandhu  \email{satpal.sandhu@bristol.ac.uk}
}
