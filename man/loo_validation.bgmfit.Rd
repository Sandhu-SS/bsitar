% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loo_validation.R
\name{loo_validation.bgmfit}
\alias{loo_validation.bgmfit}
\alias{loo_validation}
\title{Perform leave-one-out (loo) cross-validation}
\usage{
\method{loo_validation}{bgmfit}(
  model,
  resp = NULL,
  cores = 1,
  envir = globalenv(),
  deriv = NULL,
  ...
)

loo_validation(model, ...)
}
\arguments{
\item{model}{An object of class \code{bgmfit}.}

\item{resp}{A character string to specify response variable when processing
posterior draws for the univariate-by-subgroup and multivariate models (see
\code{\link[=bgm]{bgm()}} for details on fitting univariate-by-subgroup and
multivariate models). For univariate model, \code{resp = NULL} (default).
Note that argument \code{resp} must be specified for the
univariate-by-subgroup and multivariate models otherwise it will result in
an error. On the other hand, argument \code{resp} must be \code{NULL} for
the univariate model. The default setting is \code{resp = NULL} assuming a
univariate model.}

\item{cores}{Number of cores to be used when running the parallel
computations by setting the option \code{future = TRUE}. On non-Windows
systems this argument can be set globally via the mc.cores option. For the
default \code{NULL} option, the number of cores are set automatically by
calling the \code{\link[future:re-exports]{future::availableCores()}}. The number of cores used are the
maximum number of cores avaialble minus one, i.e.,
\code{future::availableCores() - 1}.}

\item{envir}{Environment of function evaluation. The default is
\code{globalenv}.}

\item{deriv}{Must be \code{NULL}.}

\item{...}{Additional arguments passed to the \code{\link[brms:loo.brmsfit]{brms::loo()}}
function. Please see \code{brms::loo} for details on
various options available.}
}
\value{
If only one model object is provided, then an object of class
\code{loo} is returned. If multiple objects are provided, an object of
class \code{loolist}.
}
\description{
Perform approximate leave-one-out cross-validation based
on the posterior likelihood using the \pkg{loo} package.
For more details see \code{\link[loo:loo]{loo}}.
}
\details{
The \strong{loo_validation} function is a wrapper around
the \code{\link[brms:loo.brmsfit]{brms::loo()}} and works exactly the same way as \code{\link[brms:loo.brmsfit]{brms::loo()}}.
}
\examples{

# Fit Bayesian SITAR model 
# To avoid running the model which takes some time, model fit to the
# \code{berkeley_mdata} has already been saved as berkeley_mfit.rda object.
# Please see \code{bgm} examples.

model <- berkeley_mfit

\donttest{
loo_validation(model, cores = 1)
}


}
\author{
Satpal Sandhu  \email{satpal.sandhu@bristol.ac.uk}
}
