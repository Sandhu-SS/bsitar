if (apv) {
data_vline <- p. %>% dplyr::filter(Parameter == name.apv)
plot.o <- plot.o +
ggplot2::geom_vline(
data = data_vline,
ggplot2::aes(xintercept = .data[['Estimate']]),
linewidth = linewidth.apv,
linetype = linetype.apv
)
if (grepl("p", bands, ignore.case = T)) {
plot.o <- plot.o +
ggplot2::annotate(
"rect",
xmin = (data_vline[[paste0(probtitles[1], '')]]),
xmax = (data_vline[[paste0(probtitles[2], '')]]),
ymin = -Inf,
ymax = Inf,
alpha = band.alpha
)
}
}
data_dv <- data_dv.o
if ('curve' %in% names(data_dv)) {
d.out <- data_dv %>% dplyr::select(-curve)
} else {
d.out <- data_dv
}
}
}
############
xvars <- model$model_info$xvar
yvars <- model$model_info$yvar
xyvars <- c(xvars, yvars)
allvars <- names(as.data.frame(newdata))
factor_vars <- names(newdata[sapply(newdata, is.factor)])
numeric_vars <- names(newdata[sapply(newdata, is.numeric)])
cov_vars <- model$model_info$cov
cov_factor_vars <- intersect(cov_vars, factor_vars)
cov_numeric_vars <- intersect(cov_vars, numeric_vars)
groupby_fstr <- c(cov_factor_vars)
groupby_fistr <- c(IDvar, cov_factor_vars)
groupby_str_au <- groupby_fistr
if (grepl("a", opt, ignore.case = T) |
grepl("u", opt, ignore.case = T)) {
if (!is.null(cov_vars)) {
stop("Adjusted curves not yet supported for model with covariate(s)")
}
if (grepl("a", opt, ignore.case = T)) {
xyadj_ed <- xyadj_(model, resp = NULL)
out_a_ <-
d.out <- trimlines_(model, newdata = xyadj_ed, trim = trim)
out_a_ <-
out_a_ %>%
dplyr::mutate(groupby = interaction(!!as.name(groupby_str_au)))
x_minimum_a_ <- floor(min(out_a_[[Xx]]))
x_maximum_a_ <- ceiling(max(out_a_[[Xx]]))
if (!is.null(set.linetype.groupby)) {
if (set.linetype.groupby == 'groupby') {
linetype.groupby <- out_a_[['groupby']]
}
} else if (is.null(set.linetype.groupby)) {
linetype.groupby <- NULL
}
if (set.linetype.groupby == 'solid') {
linetype.groupby <- NULL # 'solid'
}
############## set to NULL
linetype.groupby <- NULL
plot.o.a <- out_a_ %>%
ggplot2::ggplot(., ggplot2::aes(!!as.name(Xx))) +
ggplot2::geom_line(
ggplot2::aes(
y = !!as.name(Yy),
group = groupby,
linetype = linetype.groupby,
colour = label.d
),
linewidth = linewidth.main
) +
ggplot2::labs(x = label.x, y = label.d, color = "") +
ggplot2::scale_color_manual(values = c(color.adj)) +
ggplot2::scale_x_continuous(breaks =
seq(x_minimum_a_, x_maximum_a_, 1)) +
jtools::theme_apa(legend.pos = legendpos) +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(y = paste0("Adjusted ", "individual curves")) +
ggplot2::theme(axis.title.y.right = ggplot2::element_text(angle = 90)) +
ggplot2::labs(title = label.adj) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
if (nchar(opt) == 1) {
plot.o.a <- plot.o.a +
ggplot2::theme(plot.title = ggplot2::element_blank())
} else if (nchar(opt) > 1) {
plot.o.a <- plot.o.a +
ggplot2::theme(axis.title.y = ggplot2::element_blank())
}
if (!grepl("u", opt, ignore.case = T)) {
suppressMessages({
plot.o.a <- plot.o.a +
ggplot2::scale_color_manual(values = c(color_single))
})
}
} else if (!grepl("a", opt, ignore.case = T)) {
plot.o.a <- NULL
}
if (grepl("u", opt, ignore.case = T)) {
xyadj_ed <- xyunadj_(model, resp = NULL)
out_u_ <-
d.out <- trimlines_(model, newdata = xyadj_ed, trim = trim)
out_u_ <-
out_u_ %>%
dplyr::mutate(groupby = interaction(!!as.name(groupby_str_au)))
if (!is.null(set.linetype.groupby)) {
if (set.linetype.groupby == 'groupby') {
linetype.groupby <- out_a_[['groupby']]
}
} else if (is.null(set.linetype.groupby)) {
linetype.groupby <- NULL
}
if (set.linetype.groupby == 'solid') {
linetype.groupby <- NULL # 'solid'
}
############## set to NULL
linetype.groupby <- NULL
plot.o.u <- out_u_ %>%
ggplot2::ggplot(., ggplot2::aes(!!as.name(Xx))) +
ggplot2::geom_line(
ggplot2::aes(
y = !!as.name(Yy),
group = groupby,
linetype = linetype.groupby,
colour = label.d
),
linewidth = linewidth.main
) +
ggplot2::labs(x = label.x, y = label.d, color = "") +
ggplot2::scale_color_manual(values = c(color.unadj)) +
ggplot2::scale_x_continuous(breaks = seq(x_minimum, x_maximum, 1)) +
jtools::theme_apa(legend.pos = legendpos) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(y = paste0("Unadjusted ", "individual curves")) +
ggplot2::theme(axis.title.y.right = ggplot2::element_text(angle = 90)) +
ggplot2::labs(title = label.unadj) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
if (!grepl("a", opt, ignore.case = T)) {
suppressMessages({
plot.o.u <- plot.o.u +
ggplot2::scale_color_manual(values = c(color_single))
})
}
if (nchar(opt) == 1) {
plot.o.u <- plot.o.u +
ggplot2::theme(plot.title = ggplot2::element_blank())
} else if (nchar(opt) > 1) {
plot.o.u <- plot.o.u +
ggplot2::theme(axis.title.y = ggplot2::element_blank())
}
} else if (!grepl("u", opt, ignore.case = T)) {
plot.o.u <- NULL
}
if (grepl("a", opt, ignore.case = T) &
!grepl("u", opt, ignore.case = T)) {
plot.o <- plot.o.a
} else if (!grepl("a", opt, ignore.case = T) &
grepl("u", opt, ignore.case = T)) {
plot.o <- plot.o.u
} else if (grepl("a", opt, ignore.case = T) &
grepl("u", opt, ignore.case = T)) {
if (layout == 'facet') {
out_a_u_ <-
d.out <- out_a_ %>% dplyr::mutate(curve = 'Adjusted') %>%
dplyr::bind_rows(., out_u_ %>%
dplyr::mutate(curve = 'Unadjusted')) %>%
data.frame()
x_minimum_a_ <- floor(min(out_a_[[Xx]]))
x_maximum_a_ <- ceiling(max(out_a_[[Xx]]))
if (!is.null(set.linetype.groupby)) {
if (set.linetype.groupby == 'groupby') {
linetype.groupby <- out_a_u_[['groupby']]
}
} else if (is.null(set.linetype.groupby)) {
linetype.groupby <- NULL
}
if (set.linetype.groupby == 'solid') {
linetype.groupby <- NULL # 'solid'
}
############## set to NULL
linetype.groupby <- NULL
plot.o <- out_a_u_ %>%
ggplot2::ggplot(., ggplot2::aes(!!as.name(Xx))) +
ggplot2::geom_line(
ggplot2::aes(
y = !!as.name(Yy),
group = groupby,
linetype = linetype.groupby,
colour = label.d
),
linewidth = linewidth.main
) +
ggplot2::labs(x = label.x,
y = label.d,
color = "") +
ggplot2::scale_color_manual(values = c(color_single)) +
ggplot2::scale_x_continuous(breaks =
seq(x_minimum_a_, x_maximum_a_, 1)) +
jtools::theme_apa(legend.pos = legendpos) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) +
ggplot2::theme(axis.title.y.right =
ggplot2::element_text(angle = 90)) +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(y = paste0("Individual curves")) +
ggplot2::facet_wrap(~ curve, scales = 'free_x')
}
if (layout == 'single') {
if (!is.null(set.linetype.groupby)) {
if (set.linetype.groupby == 'groupby') {
linetype.groupby <- out_a_[['groupby']]
}
} else if (is.null(set.linetype.groupby)) {
linetype.groupby <- NULL
}
if (set.linetype.groupby == 'solid') {
linetype.groupby <- NULL # 'solid'
}
plot.o <- out_a_ %>%
ggplot2::ggplot(., ggplot2::aes(!!as.name(Xx))) +
ggplot2::geom_line(
data = out_u_,
ggplot2::aes(
y = !!as.name(Yy),
group = groupby,
linetype = linetype.groupby,
colour = label.unadj
),
linewidth = linewidth.main
) +
ggplot2::geom_line(
data = out_a_,
ggplot2::aes(
y = !!as.name(Yy),
group = groupby,
linetype = linetype.groupby,
colour = label.adj
),
linewidth = linewidth.main
) +
ggplot2::labs(x = label.x,
y = label.d,
color = "") +
ggplot2::scale_color_manual(values = c(color.unadj, color.adj)) +
ggplot2::scale_x_continuous(breaks =
seq(x_minimum_a_, x_maximum_a_, 1)) +
jtools::theme_apa(legend.pos = legendpos.adj.unadj) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) +
ggplot2::labs(y = paste0("Individual curves")) +
ggplot2::theme(axis.title.y.right = ggplot2::element_text(angle = 90))
}
}
}
if (nchar(opt) > 2) {
if (!exists('plot.o.d'))
plot.o.d <- NULL
if (!exists('plot.o.v'))
plot.o.v <- NULL
if (!exists('plot.o.a'))
plot.o.a <- NULL
if (!exists('plot.o.u'))
plot.o.u <- NULL
suppressMessages({
if (!is.null(plot.o.d)) {
plot.o.d <- plot.o.d +
ggplot2::scale_color_manual(values = c(color_single)) +
ggplot2::theme(axis.title.x = ggplot2::element_blank())
}
if (!is.null(plot.o.v)) {
plot.o.v <- plot.o.v +
ggplot2::scale_color_manual(values = c(color_single)) +
ggplot2::theme(axis.title.x = ggplot2::element_blank())
}
if (!is.null(plot.o.a)) {
plot.o.a <- plot.o.a +
ggplot2::scale_color_manual(values = c(color_single)) +
ggplot2::theme(axis.title.x = ggplot2::element_blank())
}
if (!is.null(plot.o.u)) {
plot.o.u <- plot.o.u +
ggplot2::scale_color_manual(values = c(color_single)) +
ggplot2::theme(axis.title.x = ggplot2::element_blank())
}
})
plot.list <- list(plot.o.d, plot.o.v, plot.o.a, plot.o.u)
plot.list <- plot.list[lengths(plot.list) != 0]
plot.o <- patchwork::wrap_plots(plot.list,
ncol = 2, nrow = NULL) %>%
add_global_label(
Xlab = label.x,
Ylab = "",
size = 5,
Xgap = 0.08,
Ygap = 0.04
)
plot.o <-
plot.o +  patchwork::plot_layout(guides = "collect")
}
}
install.packages('Rdpack')
citation('sitar')
citation('splinbes')
citation('splines')
install.packages('bibentry')
if (FALSE) {
use_directory("inst")
}
use_directory("inst")
usethis::use_directory("inst")
knitr::write_bib(c('sitar','brms', 'rstanarm'), 'REFERENCES.bib')
file.path(..., bibfile)
Rdpack::viewRd("./man/bsitar.Rd")
Rdpack::viewRd("./man/bsitar.Rd", type = "html")
roxygen2::roxygenise()
Rdpack::viewRd("./man/bsitar.Rd", type = "html")
Rdpack::viewRd("./man/bsitar.Rd", type = "html")
Rdpack::viewRd("./man/bsitar.Rd", type = "html")
Rdpack::viewRd("./man/bsitar.Rd")
Rdpack::viewRd("./man/bsitar.Rd")
Rdpack::viewRd("./man/bsitar.Rd")
Rdpack::viewRd("./man/bsitar.Rd")
Rdpack::viewRd("./man/bsitar.Rd")
Rdpack::viewRd("./man/bsitar.Rd")
Rdpack::viewRd("./man/bsitar.Rd")
Rdpack::viewRd("./man/bsitar.Rd")
?bsitar
Rdpack::viewRd("./man/bsitar.Rd")
Rdpack::viewRd("./man/bsitar.Rd")
set.seed(12454)
data("BTdata", package = "MCMCglmm")
install.packages('MCMCglmm')
library(brms)
set.seed(12454)
data("BTdata", package = "MCMCglmm")
BTdata$sub1 <- sample(0:1, nrow(BTdata), replace = TRUE)
BTdata$sub2 <- sample(0:1, nrow(BTdata), replace = TRUE)
library(brms)
# model using 'subset'
bform <- bf(tarsus | subset(sub1) ~ sex + (1|p|fosternest) + (1|q|dam)) +
bf(back | subset(sub2) ~ sex + (1|p|fosternest) + (1|q|dam)) +
set_rescor(FALSE)
system.time(fit <- brm(bform, BTdata))
summary(fit)
# model using 'weights'
bform2 <- bf(tarsus | subset(sub1) ~ sex + (1|p|fosternest) + (1|q|dam)) +
bf(back | subset(sub2) ~ sex + (1|p|fosternest) + (1|q|dam)) +
set_rescor(FALSE)
system.time(fit2 <- brm(bform2, BTdata, threads = threading(10)))
summary(fit2)
system.time
system.time
system.time()
system.time()
system.time()
fit$time()$total
fit$time
proc.time()
proc.time()
proc.time()
tstart=proc.time()
tend=proc.time()
tdiff=tend-tstart
tdiff
tstart=proc.time()
tend=proc.time()
tdiff=tend-tstart
tdiff
tstart=proc.time()
tend=proc.time()
tdiff=tend-tstart
tdiff
install.packages('rcmdcheck')
install.packages('checkhelper')
install.packages('checkhelper', repos = 'https://thinkr-open.r-universe.dev')
install.packages('attachment')
install.packages('spelling')
install.packages('urlchecker', repos = 'https://r-lib.r-universe.dev')
remotes::install_github("r-lib/revdepcheck")
remove.packages('curl')
installed.packages('curl')
install.packages('curl')
install.packages("curl")
remotes::install_github("r-lib/revdepcheck")
remotes::install_github("r-lib/revdepcheck", force = TRUE)
install.packages('attachment', repos = 'https://thinkr-open.r-universe.dev')
attachment::att_amend_desc()
devtools::test()
devtools::run_examples()
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
checkhelper::find_missing_tags()
?brms::conditional_effects
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
?fitted.brmsfit
?predict.brmsfit
?brms:loo
?brms:loo.brmsfit
?brms::loo.brmsfit
?brms::pp_check.brmsfit
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
use_pipe(export = TRUE)
usethis::use_pipe(export = TRUE)
devtools::document()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
load("C:/Users/drsat/OneDrive/Documents/GitHub/bsitar/data/berkeley.rda")
?berkeley
??berkeley
??heights
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
checkhelper::find_missing_tags()
?berkeley
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages('fda')
citation('fda')
roxygen2::roxygenise()
roxygen2::roxygenise()
?berkley
??berkley
??berkley
Rdpack::viewRd("./man/berkley.Rd")
Rdpack::viewRd("./man/berkeley.Rd")
??heights
??height
Rdpack::viewRd("./man/berkeley.Rd")
checkhelper::find_missing_tags()
spelling::spell_check_package()
urlchecker::url_check()
urlchecker::url_check()
urlchecker::url_update()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
rhub::check_on_windows(check_args = "--force-multiarch")
rhub::check_on_solaris()
usethis::use_git_ignore("revdep/")
usethis::use_build_ignore("revdep/")
devtools::revdep()
library(revdepcheck)
# In another session
id <- rstudioapi::terminalExecute("Rscript -e 'revdepcheck::revdep_check(num_workers = 4)'")
rstudioapi::terminalKill(id)
revdep_details(revdep = "pkg")
revdep_check()
usethis::use_cran_comments(open = rlang::is_interactive())
library(rstan)
remove.packages('rstan')
library(rstan)
library(rstan)
